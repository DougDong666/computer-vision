import torch
from torch import nn
from torch import optim
import torchvision
from torch.utils.data import DataLoader
import torchvision.transforms as transforms
class LeNet(nn.Module):
    def __init__(self):
        super(LeNet, self).__init__()
        self.model = nn.Sequential(
            nn.Conv2d(3,6,5,1,0),
            nn.MaxPool2d(2,2),
            nn.Conv2d(6,16,5,1,0),
            nn.MaxPool2d(2,2),
            nn.Flatten(),
            nn.Linear(16*5*5,120),
            nn.ReLU(),
            nn.Linear(120,84),
            nn.ReLU(),
            nn.Linear(84,10)
        )
    def forward(self,x):
        x = self.model(x)
        return x

if __name__ == '__main__':
    transform = transforms.Compose(
        [transforms.ToTensor(),
         transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

    # 50000张训练图片
    # 第一次使用时要将download设置为True才会自动去下载数据集
    train_set = torchvision.datasets.CIFAR10(root='../data', train=True,
                                             download=False, transform=transform)
    train_loader = torch.utils.data.DataLoader(train_set, batch_size=36,
                                               shuffle=True, num_workers=0)
    test_set = torchvision.datasets.CIFAR10(root='../data', train=False,
                                             download=False, transform=transform)
    test_loader = torch.utils.data.DataLoader(test_set, batch_size=36,
                                               shuffle=True, num_workers=0)
    lenet = LeNet()
    loss_fn = nn.CrossEntropyLoss()
    optimizer = optim.Adam(lenet.parameters(),lr=0.001)
    epoch = 10
    for i in range(epoch):
        print("-------{}---------".format(i+1))
        total_loss = 0
        for imgs,target in train_loader:

            out = lenet(imgs)

            lost = loss_fn(out,target)
            total_loss+=lost
            optimizer.zero_grad()
            lost.backward()
            optimizer.step()
        print("total_loss = {}".format(total_loss))
        train_loss = 0
        train_accuracy = 0
        with torch.no_grad():
            for imgs , target in test_loader:
                out = lenet(imgs)
                lost = loss_fn(out , target)
    save_path = './Lenet.pth'
    torch.save(lenet.state_dict(), save_path)


