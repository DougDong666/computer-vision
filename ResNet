import torch
from torch import nn


class ResNet(nn.Module):
    def __init__(self,block,list,numclasses):
        self.block = block
        super(ResNet, self).__init__()
        self.conv1 = nn.Conv2d(3,64,7,2,3)
        self.bn = nn.BatchNorm2d(64)
        self.relu = nn.ReLU()
        self.max = nn.MaxPool2d(3,2)
        if self.block == "BasicBlock":
            self.lay1 = self._make_res(list[0],64,64)
            self.lay2 = self._make_res(list[1],64,128)
            self.lay3 = self._make_res(list[2],128,256)
            self.lay4 = self._make_res(list[3],256,512)
            self.linear = nn.Linear(512, numclasses)
        elif self.block == "BottleBlock":
            self.lay1 = self._make_res(list[0], 64, 64)
            self.lay2 = self._make_res(list[1], 256, 128)
            self.lay3 = self._make_res(list[2], 512, 256)
            self.lay4 = self._make_res(list[3], 1024, 512)
            self.linear = nn.Linear(512 * 4, numclasses)
        self.avg = nn.AvgPool2d(7)
        self.fl = nn.Flatten()









    def forward(self,x):
        x = self.conv1(x)
        x = self.bn(x)
        x = self.relu(x)
        x = self.max(x)
        x = self.lay1(x)
        x = self.lay2(x)
        x = self.lay3(x)
        x = self.lay4(x)
        x = self.avg(x)
        x = self.fl(x)
        x = self.linear(x)
        return x
    def _make_res(self,num,in_channels,out_channels):
        k = 1
        if self.block == "BottleBlock":
            k=4
        putin = in_channels
        putout = out_channels
        layer = []
        for i in range(num):
            if in_channels != out_channels*k and i ==0:

                if self.block == "BasicBlock":
                    lay = BasicBlock(in_channels,out_channels,flag=True)
                    layer.append(lay)
                    in_channels = out_channels
                elif self.block == "BottleBlock":
                    lay = BottleBlock(in_channels,out_channels,flag=True)
                    layer.append(lay)
                    in_channels = out_channels*4
            else:
                if self.block == "BasicBlock":
                    lay = BasicBlock(in_channels,out_channels,flag=False)
                    layer.append(lay)
                elif self.block == "BottleBlock":
                    lay = BottleBlock(in_channels,out_channels,flag=False)
                    layer.append(lay)
        return nn.Sequential(*layer)






class BasicBlock(nn.Module):
    def __init__(self,in_channels,out_channels,flag = False):
        super(BasicBlock, self).__init__()
        self.flag = flag
        if self.flag:
            self.conv = nn.Conv2d(in_channels,out_channels,1,2)
        self.conv1 = nn.Conv2d(in_channels,out_channels,3,1,1)
        self.relu = nn.ReLU()
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.conv2 = nn.Conv2d(out_channels,out_channels,3,1,1)
        self.bn2 = nn.BatchNorm2d(out_channels)
    def forward(self,x):
        y = self.conv1(x)
        y = self.bn1(y)
        y = self.relu(y)
        y = self.conv2(y)
        y = self.bn2(y)
        if self.flag:
            x = self.conv(x)
            x = self.bn1(x)
        y += x
        y = self.relu(y)
        return y


class BottleBlock(nn.Module):
    def __init__(self,in_channels,out_channels,flag = False):
        super(BottleBlock, self).__init__()
        self.flag = flag
        if self.flag:
            self.conv = nn.Conv2d(in_channels,out_channels*4,1,2)
        self.conv1 = nn.Conv2d(in_channels,out_channels,1,1)
        self.relu = nn.ReLU()
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.conv2 = nn.Conv2d(out_channels,out_channels,3,1,1)
        self.bn2 = nn.BatchNorm2d(out_channels)
        self.conv3 = nn.Conv2d(out_channels,out_channels*4,1)
        self.bn3 = nn.BatchNorm2d(out_channels * 4)

    def forward(self, x):

        y = self.conv1(x)
        y = self.bn1(y)
        y = self.relu(y)
        y = self.conv2(y)
        y = self.bn2(y)
        y = self.relu(y)
        y = self.conv3(y)
        y = self.bn3(y)
        if self.flag:
            x = self.conv(x)
            x = self.bn1(x)
        y += x
        y = self.relu(y)
        return y

net = ResNet("BottleBlock",[3,4,6,3],1000)
print(net)
