import torch
from torch import nn
import torchvision
from torch.utils.data import DataLoader
import torchvision.transforms as transforms

class GoogLeNet(nn.Module):
    def __init__(self,aux = True):
        super(GoogLeNet, self).__init__()
        self.aux = aux
        self.conv1 = BasicConv2(3,64,7,2)
        self.Maxpool1 = nn.MaxPool2d(3,2)
        self.conv2 = BasicConv2(64,192,3,1)
        self.Maxpool2 = nn.MaxPool2d(3,2)
        self.inception3a = Inception(192,64,96,128,16,32,32)
        self.inception3b = Inception(256,128,128,192,32,96,64)
        self.Maxpool3 = nn.MaxPool2d(3,2)
        self.inception4a = Inception(480,192,96,208,16,48,64)
        self.inception4b = Inception(512,160,112,224,24,64,64)
        self.inception4c = Inception(512,128,128,256,24,64,64)
        self.inception4d = Inception(512,112,144,288,32,64,64)
        self.inception4e = Inception(528,256,120,320,32,128,128)
        self.Maxpool4 = nn.MaxPool2d(3,2)
        self.inception5a = Inception(832,256,120,320,32,128,128)
        self.inception5b = Inception(832,384,192,384,48,128,128)
        self.avg = nn.AvgPool2d(7,1)
        self.classifier = nn.Sequential(
            nn.Flatten(),
            nn.Dropout(p=0.4),
            nn.Linear(1024,1000)
        )
        if aux:
            self.aux1 = inceptionAux(512,1000)
            self.aux2 = inceptionAux(528,1000)
    def forward(self,x):
        x = self.conv1(x)
        x = self.Maxpool1(x)
        x = self.conv2(x)
        x = self.Maxpool2(x)
        x = self.inception3a(x)
        x = self.inception3b(x)
        x = self.Maxpool3(x)
        x = self.inception4a(x)
        if self.aux:
            y = self.aux1(x)
        x = self.inception4b(x)
        x = self.inception4c(x)
        x = self.inception4d(x)
        if self.aux:
            z = self.aux2(x)
        x = self.inception4e(x)
        x = self.Maxpool4(x)
        x = self.inception5a(x)
        x = self.inception5b(x)
        x = self.avg(x)
        x = self.classifier(x)
        if self.aux:
            return x,y,z
        return x



class BasicConv2(nn.Module):
    def __init__(self,in_channels,out_channels,kernel,stride = 1,padding = 0):
        super(BasicConv2, self).__init__()
        self.model = nn.Sequential(
            nn.Conv2d(in_channels, out_channels, kernel,stride,padding),
            nn.ReLU(),
        )
    def forward(self,x):
        x = self.model(x)
        return x
class Inception(nn.Module):
    def __init__(self,in_channels,oneplus,threeplusre,threeplus,fiveplusre,fiveplus,pool_pro):
        super(Inception, self).__init__()
        self.branch1 = BasicConv2(in_channels,oneplus,1,1)
        self.branch2 = nn.Sequential(
            BasicConv2(in_channels,threeplusre,1,1,0),
            BasicConv2(threeplusre,threeplus,3,1,1),
        )
        self.branch3 = nn.Sequential(
            BasicConv2(in_channels,fiveplusre,1,1,0),
            BasicConv2(fiveplusre,fiveplus,3,1,1),
        )
        self.branch4 = nn.Sequential(
            nn.MaxPool2d(3,1,1),
            BasicConv2(in_channels,pool_pro,1),
        )

    def forward(self,x):
        out1 = self.branch1(x)
        out2 = self.branch2(x)
        out3 = self.branch3(x)
        out4 = self.branch4(x)
        out = [out1,out2,out3,out4]
        return torch.cat(out,1)
class inceptionAux(nn.Module):
    def __init__(self,in_channels,num):
        super(inceptionAux, self).__init__()
        self.avg = nn.AvgPool2d(5,3)
        self.conv = BasicConv2(in_channels,128,1,1)
        self.classfier = nn.Sequential(
            nn.Flatten(),
            nn.Dropout(p=0.5),
            nn.Linear(128*4*4,1024),
            nn.ReLU(),
            nn.Dropout(p=0.5),
            nn.Linear(1024,num),
        )
    def forward(self,x):
        x = self.avg(x)
        x = self.conv(x)
        x = self.classfier(x)
        return x


net = GoogLeNet()
print(net)
